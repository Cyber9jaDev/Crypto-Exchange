/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesNewssearch = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var ResponseBase = {
        serializedName: "ResponseBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "ResponseBase",
            className: "ResponseBase",
            modelProperties: {
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identifiable = {
        serializedName: "Identifiable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Identifiable",
            modelProperties: __assign(__assign({}, ResponseBase.type.modelProperties), { id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Response = {
        serializedName: "Response",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Response",
            modelProperties: __assign(__assign({}, Identifiable.type.modelProperties), { webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Thing = {
        serializedName: "Thing",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Thing",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, url: {
                    readOnly: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }, image: {
                    readOnly: true,
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }, alternateName: {
                    readOnly: true,
                    serializedName: "alternateName",
                    type: {
                        name: "String"
                    }
                }, bingId: {
                    readOnly: true,
                    serializedName: "bingId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CreativeWork = {
        serializedName: "CreativeWork",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "CreativeWork",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { thumbnailUrl: {
                    readOnly: true,
                    serializedName: "thumbnailUrl",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Thing"
                            }
                        }
                    }
                }, datePublished: {
                    readOnly: true,
                    serializedName: "datePublished",
                    type: {
                        name: "String"
                    }
                }, video: {
                    readOnly: true,
                    serializedName: "video",
                    type: {
                        name: "Composite",
                        className: "VideoObject"
                    }
                } })
        }
    };
    var Article = {
        serializedName: "Article",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Article",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { wordCount: {
                    readOnly: true,
                    serializedName: "wordCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var NewsArticle = {
        serializedName: "NewsArticle",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "NewsArticle",
            modelProperties: __assign(__assign({}, Article.type.modelProperties), { category: {
                    readOnly: true,
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                }, headline: {
                    readOnly: true,
                    serializedName: "headline",
                    type: {
                        name: "Boolean"
                    }
                }, clusteredArticles: {
                    readOnly: true,
                    serializedName: "clusteredArticles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NewsArticle"
                            }
                        }
                    }
                } })
        }
    };
    var Answer = {
        serializedName: "Answer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Answer",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { followUpQueries: {
                    readOnly: true,
                    serializedName: "followUpQueries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var SearchResultsAnswer = {
        serializedName: "SearchResultsAnswer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "SearchResultsAnswer",
            modelProperties: __assign(__assign({}, Answer.type.modelProperties), { totalEstimatedMatches: {
                    readOnly: true,
                    serializedName: "totalEstimatedMatches",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var News = {
        serializedName: "News",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "News",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NewsArticle"
                            }
                        }
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MediaObject = {
        serializedName: "MediaObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "MediaObject",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { contentUrl: {
                    readOnly: true,
                    serializedName: "contentUrl",
                    type: {
                        name: "String"
                    }
                }, width: {
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                }, height: {
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ImageObject = {
        serializedName: "ImageObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageObject",
            modelProperties: __assign(__assign({}, MediaObject.type.modelProperties), { thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                } })
        }
    };
    var Query = {
        serializedName: "Query",
        type: {
            name: "Composite",
            className: "Query",
            modelProperties: {
                text: {
                    required: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                displayText: {
                    readOnly: true,
                    serializedName: "displayText",
                    type: {
                        name: "String"
                    }
                },
                webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                },
                searchLink: {
                    readOnly: true,
                    serializedName: "searchLink",
                    type: {
                        name: "String"
                    }
                },
                thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }
            }
        }
    };
    var NewsTopic = {
        serializedName: "News/Topic",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "NewsTopic",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { isBreakingNews: {
                    readOnly: true,
                    serializedName: "isBreakingNews",
                    type: {
                        name: "Boolean"
                    }
                }, query: {
                    readOnly: true,
                    serializedName: "query",
                    type: {
                        name: "Composite",
                        className: "Query"
                    }
                }, newsSearchUrl: {
                    readOnly: true,
                    serializedName: "newsSearchUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TrendingTopics = {
        serializedName: "TrendingTopics",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "TrendingTopics",
            modelProperties: __assign(__assign({}, Answer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NewsTopic"
                            }
                        }
                    }
                } })
        }
    };
    var VideoObject = {
        serializedName: "VideoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "VideoObject",
            modelProperties: __assign(__assign({}, MediaObject.type.modelProperties), { motionThumbnailUrl: {
                    readOnly: true,
                    serializedName: "motionThumbnailUrl",
                    type: {
                        name: "String"
                    }
                }, motionThumbnailId: {
                    readOnly: true,
                    serializedName: "motionThumbnailId",
                    type: {
                        name: "String"
                    }
                }, embedHtml: {
                    readOnly: true,
                    serializedName: "embedHtml",
                    type: {
                        name: "String"
                    }
                }, allowHttpsEmbed: {
                    readOnly: true,
                    serializedName: "allowHttpsEmbed",
                    type: {
                        name: "Boolean"
                    }
                }, viewCount: {
                    readOnly: true,
                    serializedName: "viewCount",
                    type: {
                        name: "Number"
                    }
                }, thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, videoId: {
                    readOnly: true,
                    serializedName: "videoId",
                    type: {
                        name: "String"
                    }
                }, allowMobileEmbed: {
                    readOnly: true,
                    serializedName: "allowMobileEmbed",
                    type: {
                        name: "Boolean"
                    }
                }, isSuperfresh: {
                    readOnly: true,
                    serializedName: "isSuperfresh",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var Organization = {
        serializedName: "Organization",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Organization",
            modelProperties: __assign({}, Thing.type.modelProperties)
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                },
                subCode: {
                    readOnly: true,
                    serializedName: "subCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                moreDetails: {
                    readOnly: true,
                    serializedName: "moreDetails",
                    type: {
                        name: "String"
                    }
                },
                parameter: {
                    readOnly: true,
                    serializedName: "parameter",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ErrorResponse",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                } })
        }
    };
    var discriminators = {
        'ResponseBase.NewsArticle': NewsArticle,
        'ResponseBase.News': News,
        'ResponseBase.SearchResultsAnswer': SearchResultsAnswer,
        'ResponseBase.ImageObject': ImageObject,
        'ResponseBase.News/Topic': NewsTopic,
        'ResponseBase.Answer': Answer,
        'ResponseBase.Article': Article,
        'ResponseBase.Thing': Thing,
        'ResponseBase.Response': Response,
        'ResponseBase.TrendingTopics': TrendingTopics,
        'ResponseBase.VideoObject': VideoObject,
        'ResponseBase.CreativeWork': CreativeWork,
        'ResponseBase.Organization': Organization,
        'ResponseBase.Identifiable': Identifiable,
        'ResponseBase.ErrorResponse': ErrorResponse,
        'ResponseBase.MediaObject': MediaObject,
        'ResponseBase': ResponseBase
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ResponseBase: ResponseBase,
        Identifiable: Identifiable,
        Response: Response,
        Thing: Thing,
        CreativeWork: CreativeWork,
        Article: Article,
        NewsArticle: NewsArticle,
        Answer: Answer,
        SearchResultsAnswer: SearchResultsAnswer,
        News: News,
        MediaObject: MediaObject,
        ImageObject: ImageObject,
        Query: Query,
        NewsTopic: NewsTopic,
        TrendingTopics: TrendingTopics,
        VideoObject: VideoObject,
        Organization: Organization,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        Answer: Answer,
        Article: Article,
        CreativeWork: CreativeWork,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        Identifiable: Identifiable,
        ImageObject: ImageObject,
        MediaObject: MediaObject,
        News: News,
        NewsArticle: NewsArticle,
        NewsTopic: NewsTopic,
        Organization: Organization,
        Query: Query,
        Response: Response,
        ResponseBase: ResponseBase,
        SearchResultsAnswer: SearchResultsAnswer,
        Thing: Thing,
        TrendingTopics: TrendingTopics,
        VideoObject: VideoObject
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: [
            "options",
            "acceptLanguage"
        ],
        mapper: {
            serializedName: "Accept-Language",
            type: {
                name: "String"
            }
        }
    };
    var category = {
        parameterPath: [
            "options",
            "category"
        ],
        mapper: {
            serializedName: "category",
            type: {
                name: "String"
            }
        }
    };
    var clientId = {
        parameterPath: [
            "options",
            "clientId"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientID",
            type: {
                name: "String"
            }
        }
    };
    var clientIp = {
        parameterPath: [
            "options",
            "clientIp"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientIP",
            type: {
                name: "String"
            }
        }
    };
    var count = {
        parameterPath: [
            "options",
            "count"
        ],
        mapper: {
            serializedName: "count",
            type: {
                name: "Number"
            }
        }
    };
    var countryCode = {
        parameterPath: [
            "options",
            "countryCode"
        ],
        mapper: {
            serializedName: "cc",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: 'https://api.cognitive.microsoft.com',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var freshness = {
        parameterPath: [
            "options",
            "freshness"
        ],
        mapper: {
            serializedName: "freshness",
            type: {
                name: "String"
            }
        }
    };
    var headlineCount = {
        parameterPath: [
            "options",
            "headlineCount"
        ],
        mapper: {
            serializedName: "headlineCount",
            type: {
                name: "Number"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "X-Search-Location",
            type: {
                name: "String"
            }
        }
    };
    var market = {
        parameterPath: [
            "options",
            "market"
        ],
        mapper: {
            serializedName: "mkt",
            type: {
                name: "String"
            }
        }
    };
    var offset = {
        parameterPath: [
            "options",
            "offset"
        ],
        mapper: {
            serializedName: "offset",
            type: {
                name: "Number"
            }
        }
    };
    var originalImage = {
        parameterPath: [
            "options",
            "originalImage"
        ],
        mapper: {
            serializedName: "originalImg",
            type: {
                name: "Boolean"
            }
        }
    };
    var query = {
        parameterPath: "query",
        mapper: {
            required: true,
            serializedName: "q",
            type: {
                name: "String"
            }
        }
    };
    var safeSearch = {
        parameterPath: [
            "options",
            "safeSearch"
        ],
        mapper: {
            serializedName: "safeSearch",
            type: {
                name: "String"
            }
        }
    };
    var setLang = {
        parameterPath: [
            "options",
            "setLang"
        ],
        mapper: {
            serializedName: "setLang",
            type: {
                name: "String"
            }
        }
    };
    var since = {
        parameterPath: [
            "options",
            "since"
        ],
        mapper: {
            serializedName: "since",
            type: {
                name: "Number"
            }
        }
    };
    var sortBy = {
        parameterPath: [
            "options",
            "sortBy"
        ],
        mapper: {
            serializedName: "sortBy",
            type: {
                name: "String"
            }
        }
    };
    var textDecorations = {
        parameterPath: [
            "options",
            "textDecorations"
        ],
        mapper: {
            serializedName: "textDecorations",
            type: {
                name: "Boolean"
            }
        }
    };
    var textFormat = {
        parameterPath: [
            "options",
            "textFormat"
        ],
        mapper: {
            serializedName: "textFormat",
            type: {
                name: "String"
            }
        }
    };
    var userAgent = {
        parameterPath: [
            "options",
            "userAgent"
        ],
        mapper: {
            serializedName: "User-Agent",
            type: {
                name: "String"
            }
        }
    };
    var xBingApisSDK = {
        parameterPath: "xBingApisSDK",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "X-BingApis-SDK",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NewsOperations. */
    var NewsOperations = /** @class */ (function () {
        /**
         * Create a NewsOperations.
         * @param {NewsSearchClientContext} client Reference to the service client.
         */
        function NewsOperations(client) {
            this.client = client;
        }
        NewsOperations.prototype.search = function (query, options, callback) {
            return this.client.sendOperationRequest({
                query: query,
                options: options
            }, searchOperationSpec, callback);
        };
        NewsOperations.prototype.category = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, categoryOperationSpec, callback);
        };
        NewsOperations.prototype.trending = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, trendingOperationSpec, callback);
        };
        return NewsOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var searchOperationSpec = {
        httpMethod: "GET",
        path: "news/search",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            countryCode,
            count,
            freshness,
            market,
            offset,
            originalImage,
            query,
            safeSearch,
            setLang,
            sortBy,
            textDecorations,
            textFormat
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        responses: {
            200: {
                bodyMapper: News
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var categoryOperationSpec = {
        httpMethod: "GET",
        path: "news",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            countryCode,
            category,
            count,
            headlineCount,
            market,
            offset,
            originalImage,
            safeSearch,
            setLang,
            textDecorations,
            textFormat
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        responses: {
            200: {
                bodyMapper: News
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var trendingOperationSpec = {
        httpMethod: "GET",
        path: "news/trendingtopics",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            countryCode,
            count,
            market,
            offset,
            safeSearch,
            setLang,
            since,
            sortBy,
            textDecorations,
            textFormat
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        responses: {
            200: {
                bodyMapper: TrendingTopics
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-newssearch";
    var packageVersion = "3.0.1";
    var NewsSearchClientContext = /** @class */ (function (_super) {
        __extends(NewsSearchClientContext, _super);
        /**
         * Initializes a new instance of the NewsSearchClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function NewsSearchClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.endpoint = 'https://api.cognitive.microsoft.com';
            _this.baseUri = "{Endpoint}/bing/v7.0";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            if (options.endpoint !== null && options.endpoint !== undefined) {
                _this.endpoint = options.endpoint;
            }
            return _this;
        }
        return NewsSearchClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var NewsSearchClient = /** @class */ (function (_super) {
        __extends(NewsSearchClient, _super);
        /**
         * Initializes a new instance of the NewsSearchClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function NewsSearchClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.news = new NewsOperations(_this);
            return _this;
        }
        return NewsSearchClient;
    }(NewsSearchClientContext));

    exports.NewsOperations = NewsOperations;
    exports.NewsSearchClient = NewsSearchClient;
    exports.NewsSearchClientContext = NewsSearchClientContext;
    exports.NewsSearchMappers = mappers;
    exports.NewsSearchModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-newssearch.js.map
